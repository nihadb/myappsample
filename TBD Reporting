DROP TABLE PERIODS PURGE;
CREATE TABLE PERIODS
AS
WITH D0
AS
(
    SELECT DISTINCT CALENDAR_YEAR_ID , 
        MAX(CALENDAR_DAY) OVER (PARTITION BY CALENDAR_YEAR_ID) YEAR_LAST_DAY ,
        MIN(CALENDAR_DAY) OVER (PARTITION BY CALENDAR_YEAR_ID) YEAR_FIRST_DAY 
    FROM D_TRADING_CALENDAR
),
D1
AS
(
    SELECT CALENDAR_YEAR_ID,  YEAR_LAST_DAY, YEAR_FIRST_DAY,
            LAG(CALENDAR_YEAR_ID) OVER (ORDER BY CALENDAR_YEAR_ID) PY_YEAR_ID,
            LAG(YEAR_LAST_DAY) OVER (ORDER BY CALENDAR_YEAR_ID) PY_YEAR_LAST_DAY
    FROM D0
),
D2
AS
(
    SELECT DISTINCT A.*, C.ACCOUNT_ID, C.RUN_GROUP_NAME, 
            FIRST_VALUE(C.CAPITAL) OVER (PARTITION BY A.CALENDAR_YEAR_ID, C.ACCOUNT_ID, C.RUN_GROUP_NAME ORDER BY C.PERIOD_ID) BEGIN_YEAR_CAPITAL,
            FIRST_VALUE(C.PERIOD_ID||' 00:00:00') OVER (PARTITION BY A.CALENDAR_YEAR_ID, C.ACCOUNT_ID, C.RUN_GROUP_NAME ORDER BY C.PERIOD_ID) BEGIN_YEAR_CALENDAR_DAY,
            B.CAPITAL PY_YEAR_CAPITAL
    FROM D1 A
    JOIN D_TRADE_PERFORMANCE C
    ON A.CALENDAR_YEAR_ID = SUBSTR(C.PERIOD_ID, 1, 4) 
    AND C.PERIOD_GROUP = 'Day'
    LEFT JOIN D_TRADE_PERFORMANCE B
    ON C.ACCOUNT_ID = B.ACCOUNT_ID
    AND C.RUN_GROUP_NAME = B.RUN_GROUP_NAME
    AND A.PY_YEAR_LAST_DAY = B.PERIOD_ID ||' 00:00:00'
    AND B.PERIOD_GROUP = 'Day'
),
D3
AS
(
    SELECT A.CALENDAR_YEAR_ID,  A.PY_YEAR_ID,  A.ACCOUNT_ID, A.RUN_GROUP_NAME,  A.YEAR_FIRST_DAY, A.YEAR_LAST_DAY,
        NVL(A.PY_YEAR_CAPITAL, BEGIN_YEAR_CAPITAL) BEGIN_YEAR_CAPITAL,
        MAX(CASE WHEN B.SYMBOL = 'SPY' THEN B.CLOSE END) SPY_BEGIN_YEAR_PRICE,
        MAX(CASE WHEN B.SYMBOL = 'QQQ' THEN B.CLOSE END) QQQ_BEGIN_YEAR_PRICE,
        MAX(CASE WHEN C.SYMBOL = 'SPY' THEN C.CLOSE END) SPY_LAST_YEAR_PRICE,
        MAX(CASE WHEN C.SYMBOL = 'QQQ' THEN C.CLOSE END) QQQ_LAST_YEAR_PRICE,
        MAX(CASE WHEN B.SYMBOL = 'SPY' THEN B.TICK_TIMESTAMP END) SPY_BEGIN_YEAR_DAY,
        MAX(CASE WHEN B.SYMBOL = 'QQQ' THEN B.TICK_TIMESTAMP END) QQQ_BEGIN_YEAR_DAY
    FROM D2 A
    LEFT JOIN O_MKT_DATA B
    ON B.SYMBOL IN ('SPY', 'QQQ')
    AND B.TICK_TIMESTAMP = A.BEGIN_YEAR_CALENDAR_DAY
    AND B.INTERVAL = '1D'
    LEFT JOIN O_MKT_DATA C
    ON C.SYMBOL IN ('SPY', 'QQQ')
    AND C.TICK_TIMESTAMP = A.PY_YEAR_LAST_DAY
    AND C.INTERVAL = '1D'
    GROUP BY A.CALENDAR_YEAR_ID,  A.PY_YEAR_ID,  A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.YEAR_FIRST_DAY, A.YEAR_LAST_DAY, NVL(A.PY_YEAR_CAPITAL, BEGIN_YEAR_CAPITAL) 
)
SELECT A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.CALENDAR_YEAR_ID YEAR_ID,  A.PY_YEAR_ID,
    A.BEGIN_YEAR_CAPITAL,
    CASE WHEN A.SPY_BEGIN_YEAR_DAY = A.YEAR_FIRST_DAY THEN NVL(A.SPY_LAST_YEAR_PRICE, A.SPY_BEGIN_YEAR_PRICE) ELSE A.SPY_BEGIN_YEAR_PRICE END SPY_BEGIN_PRICE,
    CASE WHEN A.QQQ_BEGIN_YEAR_DAY = A.YEAR_FIRST_DAY THEN NVL(A.QQQ_LAST_YEAR_PRICE, A.QQQ_BEGIN_YEAR_PRICE) ELSE A.QQQ_BEGIN_YEAR_PRICE END QQQ_BEGIN_PRICE
FROM D3 A
ORDER BY 1, 2, 3;





DROP TABLE PERIODS_METRICS PURGE;
CREATE TABLE PERIODS_METRICS
AS
WITH D0
AS
(
    SELECT A.ACCOUNT_ID, A.RUN_GROUP_NAME, B.YEAR_ID, B.PY_YEAR_ID, A.PERIOD_GROUP, A.PERIOD_ID,
                A.OPEN_TRADES,
                A.OPEN_PROFIT,
                A.OPEN_TRADES_HOLDING_TIME,
                A.OPEN_WIN_RATIO,
                
                A.CAPITAL,
                A.CAPITAL_INCREMENT PROFIT,
                SUM(A.CAPITAL_INCREMENT) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_PROFIT,
                SUM(A.CAPITAL_INCREMENT) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP ORDER BY A.PERIOD_ID) TOT_RUNNING_PROFIT,
                B.BEGIN_YEAR_CAPITAL,
                C.CLOSE SPY_LAST_PRICE,
                B.SPY_BEGIN_PRICE,
                D.CLOSE QQQ_LAST_PRICE,
                B.QQQ_BEGIN_PRICE,
                A.RETURN_RATE,
                A.SPY_RETURN_RATE,
                A.QQQ_RETURN_RATE,
                
                A.CASH_PERIOD CASH,
                SUM(A.CASH_PERIOD) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_CASH,
                SUM(A.CASH_PERIOD) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP ORDER BY A.PERIOD_ID) TOT_RUNNING_CASH,
                A.UTILIZED_RATIO,
                
                ROUND((A.POSSIBLE_TRADES - A.EXCLUDE_TRADES)/NULLIF(A.POSSIBLE_TRADES,0), 3) MODEL_FILL_RATE,
                SUM(A.POSSIBLE_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_POSSIBLE_TRADES,
                SUM(A.EXCLUDE_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_EXCLUDE_TRADES,
                
                ROUND((A.NEW_TRADES - A.PENDING_TRADES - A.CANCELED_TRADES)/NULLIF(A.NEW_TRADES, 0), 3) TRADE_FILL_RATE,
                SUM(A.NEW_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_NEW_TRADES,
                SUM(A.PENDING_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_PENDING_TRADES,
                SUM(A.CANCELED_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_CANCELED_TRADES,
                
                A.CLOSED_TRADES_HOLDING_TIME,
                SUM(A.CLOSED_TRADES_HOLDING_TIME * A.CLOSED_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) 
                A.CLOSED_WIN_RATIO,
                A.CLOSED_PROFIT_FACTOR,
                A.CLOSED_EV,
                A.CLOSED_LOSS_TRADES,
                A.CLOSED_LOSS_PROFIT,
                A.CLOSED_WIN_TRADES,
                A.CLOSED_WIN_PROFIT,
                SUM(A.CLOSED_WIN_PROFIT) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_CLOSED_WIN_PROFIT,
                SUM(A.CLOSED_LOSS_PROFIT) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_CLOSED_LOSS_PROFIT,
                SUM(A.CLOSED_WIN_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_CLOSED_WIN_TRADES,
                SUM(A.CLOSED_LOSS_TRADES) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP, B.YEAR_ID ORDER BY A.PERIOD_ID) YTD_CLOSED_LOSS_TRADES
                
    FROM D_TRADE_PERFORMANCE A
    JOIN PERIODS B
    ON A.ACCOUNT_ID = B.ACCOUNT_ID
    AND A.RUN_GROUP_NAME = B.RUN_GROUP_NAME
    AND SUBSTR(A.PERIOD_ID, 1, 4) = B.YEAR_ID
    LEFT JOIN O_MKT_DATA C
    ON C.SYMBOL = 'SPY'
    AND C.INTERVAL = '1D'
    AND C.TICK_TIMESTAMP = A.LAST_REPORTING_DAY
    LEFT JOIN O_MKT_DATA D
    ON D.SYMBOL = 'QQQ'
    AND D.INTERVAL = '1D'
    AND D.TICK_TIMESTAMP = A.LAST_REPORTING_DAY
    WHERE PERIOD_GROUP <> 'All'
),
D1
AS
(
    SELECT A.ACCOUNT_ID, A.RUN_GROUP_NAME, 'CY' PERIOD_TYPE,   A.YEAR_ID, A.PY_YEAR_ID, A.PERIOD_GROUP, A.PERIOD_ID,
                A.CAPITAL,
                A.CASH,  A.YTD_CASH, A.TOT_RUNNING_CASH, 
                A.PROFIT, A.YTD_PROFIT, A.TOT_RUNNING_PROFIT,
                A.RETURN_RATE, ROUND(A.YTD_PROFIT/NULLIF(A.BEGIN_YEAR_CAPITAL,0) , 4) YTD_RETURN_RATE,  ROUND(A.TOT_RUNNING_PROFIT/NULLIF(AVG(A.TOT_RUNNING_CASH) OVER (PARTITION BY A.ACCOUNT_ID, A.RUN_GROUP_NAME, A.PERIOD_GROUP ORDER BY A.PERIOD_ID) ,0) , 4) TOT_RETURN_RATE,
                A.SPY_RETURN_RATE, ROUND((A.SPY_LAST_PRICE - A.SPY_BEGIN_PRICE)/NULLIF(A.SPY_BEGIN_PRICE, 0), 4) SPY_YTD_RETURN_RATE,
                A.QQQ_RETURN_RATE, ROUND((A.QQQ_LAST_PRICE - QQQ_BEGIN_PRICE)/NULLIF(A.QQQ_BEGIN_PRICE, 0), 4) QQQ_YTD_RETURN_RATE,
                
                A.OPEN_TRADES,
                A.OPEN_PROFIT,
                A.OPEN_TRADES_HOLDING_TIME,
                A.OPEN_WIN_RATIO,
                A.UTILIZED_RATIO,
                
                A.MODEL_FILL_RATE,
                ROUND((A.YTD_POSSIBLE_TRADES - A.YTD_EXCLUDE_TRADES)/NULLIF(A.YTD_POSSIBLE_TRADES, 0), 3) YTD_MODEL_FILL_RATE,
                
                TRADE_FILL_RATE,
                ROUND((A.YTD_NEW_TRADES - A.YTD_PENDING_TRADES - A.YTD_CANCELED_TRADES)/NULLIF(A.YTD_NEW_TRADES, 0), 3)  YTD_TRADE_FILL_RATE,
                
                ROUND(CLOSED_WIN_PROFIT/NULLIF(CLOSED_WIN_TRADES, 0)) CLOSED_WIN_AVERAGE,
                ROUND(A.YTD_CLOSED_WIN_PROFIT/NULLIF(YTD_CLOSED_WIN_TRADES, 0)) YTD_CLOSED_WIN_AVERAGE,
                ROUND(CLOSED_LOSS_PROFIT/NULLIF(CLOSED_LOSS_TRADES, 0)) CLOSED_LOSS_AVERAGE,
                ROUND(A.YTD_CLOSED_LOSS_PROFIT/NULLIF(YTD_CLOSED_LOSS_TRADES, 0)) YTD_CLOSED_LOSS_AVERAGE,
                
                A.CLOSED_TRADES_HOLDING_TIME,
                A.CLOSED_WIN_RATIO,
                ROUND(YTD_CLOSED_WIN_TRADES/NULLIF(YTD_CLOSED_WIN_TRADES+YTD_CLOSED_LOSS_TRADES, 0), 3) YTD_CLOSED_WIN_RATIO,
                A.CLOSED_PROFIT_FACTOR,
                ROUND(YTD_CLOSED_WIN_PROFIT/NULLIF(YTD_CLOSED_LOSS_PROFIT, 0), 2) YTD_CLOSED_PROFIT_FACTOR,
                A.CLOSED_EV,
                ROUND((A.YTD_CLOSED_WIN_PROFIT/NULLIF(YTD_CLOSED_WIN_TRADES, 0)) * (YTD_CLOSED_WIN_TRADES/NULLIF(YTD_CLOSED_WIN_TRADES+YTD_CLOSED_LOSS_TRADES, 0)) + 
                    (A.YTD_CLOSED_LOSS_PROFIT/NULLIF(YTD_CLOSED_LOSS_TRADES, 0)) * (YTD_CLOSED_LOSS_TRADES/NULLIF(YTD_CLOSED_WIN_TRADES+YTD_CLOSED_LOSS_TRADES, 0))) YTD_CLOSED_EV
    FROM D0 A
), 
D2
AS
(
    SELECT A.ACCOUNT_ID, A.RUN_GROUP_NAME, 'PY' PERIOD_TYPE,   A.YEAR_ID, A.PY_YEAR_ID, A.PERIOD_GROUP, A.PERIOD_ID,
                B.CAPITAL,
                B.CASH,  B.YTD_CASH, B.TOT_RUNNING_CASH,
                B.PROFIT, B.YTD_PROFIT, B.TOT_RUNNING_PROFIT,
                B.RETURN_RATE, B.YTD_RETURN_RATE,
                B.SPY_RETURN_RATE, B.SPY_YTD_RETURN_RATE,
                B.QQQ_RETURN_RATE, B.QQQ_YTD_RETURN_RATE, B.TOT_RETURN_RATE,
                
                B.OPEN_TRADES,
                B.OPEN_PROFIT,
                B.OPEN_TRADES_HOLDING_TIME,
                B.OPEN_WIN_RATIO,
                B.UTILIZED_RATIO,
                
                B.MODEL_FILL_RATE,
                B.YTD_MODEL_FILL_RATE,
                
                B.TRADE_FILL_RATE,
                B.YTD_TRADE_FILL_RATE,
                
                B.CLOSED_WIN_AVERAGE,
                B.YTD_CLOSED_WIN_AVERAGE,
                B.CLOSED_LOSS_AVERAGE,
                B.YTD_CLOSED_LOSS_AVERAGE,
                
                B.CLOSED_TRADES_HOLDING_TIME,
                B.CLOSED_WIN_RATIO,
                B.YTD_CLOSED_WIN_RATIO,
                B.CLOSED_PROFIT_FACTOR,
                B.YTD_CLOSED_PROFIT_FACTOR,
                B.CLOSED_EV,
                ROUND(B.YTD_CLOSED_EV) YTD_CLOSED_EV
    FROM D1 A
    LEFT JOIN D1 B
    ON A.ACCOUNT_ID = B.ACCOUNT_ID
    AND A.RUN_GROUP_NAME = B.RUN_GROUP_NAME
    AND A.PERIOD_GROUP = B.PERIOD_GROUP
    AND A.PY_YEAR_ID = B.YEAR_ID
    AND SUBSTR(A.PERIOD_ID, 6) = SUBSTR(B.PERIOD_ID, 6)
)
SELECT * 
FROM D1
WHERE PERIOD_GROUP IN ('Day', 'Month')
UNION ALL
SELECT *
FROM D2
WHERE PERIOD_GROUP IN ('Month');



SELECT * FROM PERIODS_METRICS
WHERE period_group = 'Day'
AND RUN_GROUP_NAME = 'Simulation'
ORDER BY 1, 2, 4, 6, 7, 3;

SELECT * FROM PERIODS
ORDER BY 1, 2, 3, 4;

SELECT * FROM D_TRADE_PERFORMANCE
WHERE PERIOD_GROUP = 'Day'
AND run_group_name = 'RunGroupLive'
ORDER BY PERIOD_ID;






SELECT A.ACCOUNT_ID, A.RUN_GROUP_NAME,  A.PERIOD_GROUP, A.PERIOD_ID,  
    A.CAPITAL CY_CAPITAL, C.CAPITAL PY_CAPITAL, 
    A.PROFIT 
FROM D_TRADE_PERFORMANCE A
LEFT JOIN PERIODS B
ON A.PERIOD_GROUP = B.PERIOD_GROUP
AND A.PERIOD_ID = B.PERIOD_ID
LEFT JOIN D_TRADE_PERFORMANCE C
ON A.ACCOUNT_ID = C.ACCOUNT_ID
AND A.RUN_GROUP_NAME = C.RUN_GROUP_NAME
AND A.PERIOD_GROUP = C.PERIOD_GROUP
AND B.PY_PERIOD_ID = C.PERIOD_ID
WHERE A.PERIOD_GROUP = 'Month'
ORDER BY 3, 4;


SELECT * 
FROM PERIODS
WHERE PERIOD_GROUP = 'Month';


SELECT RETURN_RATE, SUM(RETURN_RATE) OVER (ORDER BY PERIOD_ID)
FROM D_TRADE_PERFORMANCE
WHERE PERIOD_GROUP = 'Month'
AND SUBSTR(PERIOD_ID, 1, 4) = '2020'
ORDER BY PERIOD_ID;

SELECT *
FROM D_TRADE_PERFORMANCE
WHERE PERIOD_GROUP = 'Week'
ORDER BY PERIOD_ID;


TRADES
INCREMENTAL_TRADES
CASH
INCREMENTAL_CASH
CAPITAL_INCREMENT
CAPITAL,

RETURN_RATE,
CUMULATIVE_RETURN_RATE,
MAX_DRAWDOWN,

WIN_RATE,
PROFIT_FACTOR,
WIN_AVERAGE,
LOSS_AVERAGE,
HOLDING_TIME,
OPEN_PROFIT,
OPEN_TRADES,

SPY
BRK
QQQ

;

SELECT * FROM D_TRADING_CALENDAR WHERE CALENDAR_DAY = '2021-12-31 00:00:00'
